/*
 * PxApi
 *
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | - -- -- --        | - -- -- -- -- --      | - -- -- -- -- -- -- -- -- -- --       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Number of requests has surpassed the threshold                            | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PCAxis.OpenAPILib.Converters;

namespace PCAxis.OpenAPILib.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TableMetadata : IEquatable<TableMetadata>
    {
        /// <summary>
        /// Identifyer for the table.
        /// </summary>
        /// <value>Identifyer for the table.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A title for the table that describes the content of it.
        /// </summary>
        /// <value>A title for the table that describes the content of it.</value>
        [Required]
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// A description of the table.
        /// </summary>
        /// <value>A description of the table.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If the content of the table can be aggregated.
        /// </summary>
        /// <value>If the content of the table can be aggregated.</value>
        [DataMember(Name="agregationPossible", EmitDefaultValue=true)]
        public bool AgregationPossible { get; set; }

        /// <summary>
        /// A marker if the table is a part of the national official statistics.
        /// </summary>
        /// <value>A marker if the table is a part of the national official statistics.</value>
        [DataMember(Name="officalStatistics", EmitDefaultValue=true)]
        public bool OfficalStatistics { get; set; }

        /// <summary>
        /// The code for the subject area that the table belongs to.
        /// </summary>
        /// <value>The code for the subject area that the table belongs to.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// The name of the organization responsible for the table.
        /// </summary>
        /// <value>The name of the organization responsible for the table.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// A copyright statement for the data it could also be SPDX (https://spdx.org/licenses/) identifyer
        /// </summary>
        /// <value>A copyright statement for the data it could also be SPDX (https://spdx.org/licenses/) identifyer</value>
        [DataMember(Name="copyright", EmitDefaultValue=false)]
        public string Copyright { get; set; }

        /// <summary>
        /// A list of strings/tags associated with the table
        /// </summary>
        /// <value>A list of strings/tags associated with the table</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// A date and time when the table was last updated
        /// </summary>
        /// <value>A date and time when the table was last updated</value>
        [DataMember(Name="updated", EmitDefaultValue=true)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// A list of notes associated with the table as a whole or a specific area of the table
        /// </summary>
        /// <value>A list of notes associated with the table as a whole or a specific area of the table</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<CellNote> Notes { get; set; }

        /// <summary>
        /// A list of contacts associated with the table.
        /// </summary>
        /// <value>A list of contacts associated with the table.</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets ContentsVariable
        /// </summary>
        [DataMember(Name="contentsVariable", EmitDefaultValue=false)]
        public ContentsVariable ContentsVariable { get; set; }

        /// <summary>
        /// Gets or Sets TimeVariable
        /// </summary>
        [DataMember(Name="timeVariable", EmitDefaultValue=false)]
        public TimeVariable TimeVariable { get; set; }

        /// <summary>
        /// Gets or Sets GeoVariables
        /// </summary>
        [DataMember(Name="geoVariables", EmitDefaultValue=false)]
        public List<GeographicalVariable> GeoVariables { get; set; }

        /// <summary>
        /// Gets or Sets RegularVariables
        /// </summary>
        [DataMember(Name="regularVariables", EmitDefaultValue=false)]
        public List<RegularVariable> RegularVariables { get; set; }

        /// <summary>
        /// Gets or Sets VariablesDisplayOrder
        /// </summary>
        [DataMember(Name="variablesDisplayOrder", EmitDefaultValue=false)]
        public List<string> VariablesDisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableMetadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AgregationPossible: ").Append(AgregationPossible).Append("\n");
            sb.Append("  OfficalStatistics: ").Append(OfficalStatistics).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Copyright: ").Append(Copyright).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  ContentsVariable: ").Append(ContentsVariable).Append("\n");
            sb.Append("  TimeVariable: ").Append(TimeVariable).Append("\n");
            sb.Append("  GeoVariables: ").Append(GeoVariables).Append("\n");
            sb.Append("  RegularVariables: ").Append(RegularVariables).Append("\n");
            sb.Append("  VariablesDisplayOrder: ").Append(VariablesDisplayOrder).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TableMetadata)obj);
        }

        /// <summary>
        /// Returns true if TableMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of TableMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AgregationPossible == other.AgregationPossible ||
                    
                    AgregationPossible.Equals(other.AgregationPossible)
                ) && 
                (
                    OfficalStatistics == other.OfficalStatistics ||
                    
                    OfficalStatistics.Equals(other.OfficalStatistics)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Copyright == other.Copyright ||
                    Copyright != null &&
                    Copyright.Equals(other.Copyright)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    ContentsVariable == other.ContentsVariable ||
                    ContentsVariable != null &&
                    ContentsVariable.Equals(other.ContentsVariable)
                ) && 
                (
                    TimeVariable == other.TimeVariable ||
                    TimeVariable != null &&
                    TimeVariable.Equals(other.TimeVariable)
                ) && 
                (
                    GeoVariables == other.GeoVariables ||
                    GeoVariables != null &&
                    other.GeoVariables != null &&
                    GeoVariables.SequenceEqual(other.GeoVariables)
                ) && 
                (
                    RegularVariables == other.RegularVariables ||
                    RegularVariables != null &&
                    other.RegularVariables != null &&
                    RegularVariables.SequenceEqual(other.RegularVariables)
                ) && 
                (
                    VariablesDisplayOrder == other.VariablesDisplayOrder ||
                    VariablesDisplayOrder != null &&
                    other.VariablesDisplayOrder != null &&
                    VariablesDisplayOrder.SequenceEqual(other.VariablesDisplayOrder)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + AgregationPossible.GetHashCode();
                    
                    hashCode = hashCode * 59 + OfficalStatistics.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Copyright != null)
                    hashCode = hashCode * 59 + Copyright.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (ContentsVariable != null)
                    hashCode = hashCode * 59 + ContentsVariable.GetHashCode();
                    if (TimeVariable != null)
                    hashCode = hashCode * 59 + TimeVariable.GetHashCode();
                    if (GeoVariables != null)
                    hashCode = hashCode * 59 + GeoVariables.GetHashCode();
                    if (RegularVariables != null)
                    hashCode = hashCode * 59 + RegularVariables.GetHashCode();
                    if (VariablesDisplayOrder != null)
                    hashCode = hashCode * 59 + VariablesDisplayOrder.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TableMetadata left, TableMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TableMetadata left, TableMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
