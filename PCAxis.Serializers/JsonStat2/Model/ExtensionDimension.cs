/*
 * PxApi
 *
 * This api lets you do 2 things; Find a table(Navigation) and use a table (Table).  _Table below is added to show how tables can be described in yml._  **Table contains status code this API may return** | Status code    | Description      | Reason                      | | - -- -- --        | - -- -- -- -- --      | - -- -- -- -- -- -- -- -- -- --       | | 200            | Success          | The endpoint has delivered response for the request                      | | 400            | Bad request      | If the request is not valid | | 404            | Not found        | If the URL in request does not exist | | 429            | Too many request | Number of requests has surpassed the threshold                            | 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Serializers.JsonStat2.Model
{ 
    /// <summary>
    /// extension at dimension
    /// </summary>
    [DataContract]
    public class ExtensionDimension : IEquatable<ExtensionDimension>
    {
        /// <summary>
        /// Can dimension be elminated
        /// </summary>
        /// <value>Can dimension be elminated</value>
        [DataMember(Name="elimination", EmitDefaultValue=true)]
        public bool Elimination { get; set; }

        /// <summary>
        /// Elimination value code
        /// </summary>
        /// <value>Elimination value code</value>
        [DataMember(Name="eliminationValueCode", EmitDefaultValue=false)]
        public string EliminationValueCode { get; set; }

        /// <summary>
        /// Notes for dimension
        /// </summary>
        /// <value>Notes for dimension</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public List<Note> Note { get; set; }

        /// <summary>
        /// Notes for values in dimension.
        /// </summary>
        /// <value>Notes for values in dimension.</value>
        [DataMember(Name="valueNote", EmitDefaultValue=false)]
        public Dictionary<string, List<Note>> ValueNote { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public Filters Filters { get; set; }

        /// <summary>
        /// How often a table is updated
        /// </summary>
        /// <value>How often a table is updated</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public string Frequency { get; set; }

        /// <summary>
        /// Earliest time period in table
        /// </summary>
        /// <value>Earliest time period in table</value>
        [DataMember(Name="firstPeriod", EmitDefaultValue=false)]
        public string FirstPeriod { get; set; }

        /// <summary>
        /// Latest time period in table
        /// </summary>
        /// <value>Latest time period in table</value>
        [DataMember(Name="lastPeriod", EmitDefaultValue=false)]
        public string LastPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionDimension {\n");
            sb.Append("  Elimination: ").Append(Elimination).Append("\n");
            sb.Append("  EliminationValueCode: ").Append(EliminationValueCode).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ValueNote: ").Append(ValueNote).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  FirstPeriod: ").Append(FirstPeriod).Append("\n");
            sb.Append("  LastPeriod: ").Append(LastPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExtensionDimension)obj);
        }

        /// <summary>
        /// Returns true if ExtensionDimension instances are equal
        /// </summary>
        /// <param name="other">Instance of ExtensionDimension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionDimension other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Elimination == other.Elimination ||
                    
                    Elimination.Equals(other.Elimination)
                ) && 
                (
                    EliminationValueCode == other.EliminationValueCode ||
                    EliminationValueCode != null &&
                    EliminationValueCode.Equals(other.EliminationValueCode)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    other.Note != null &&
                    Note.SequenceEqual(other.Note)
                ) && 
                (
                    ValueNote == other.ValueNote ||
                    ValueNote != null &&
                    other.ValueNote != null &&
                    ValueNote.SequenceEqual(other.ValueNote)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    Filters.Equals(other.Filters)
                ) && 
                (
                    Frequency == other.Frequency ||
                    Frequency != null &&
                    Frequency.Equals(other.Frequency)
                ) && 
                (
                    FirstPeriod == other.FirstPeriod ||
                    FirstPeriod != null &&
                    FirstPeriod.Equals(other.FirstPeriod)
                ) && 
                (
                    LastPeriod == other.LastPeriod ||
                    LastPeriod != null &&
                    LastPeriod.Equals(other.LastPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Elimination.GetHashCode();
                    if (EliminationValueCode != null)
                    hashCode = hashCode * 59 + EliminationValueCode.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (ValueNote != null)
                    hashCode = hashCode * 59 + ValueNote.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                    if (Frequency != null)
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    if (FirstPeriod != null)
                    hashCode = hashCode * 59 + FirstPeriod.GetHashCode();
                    if (LastPeriod != null)
                    hashCode = hashCode * 59 + LastPeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExtensionDimension left, ExtensionDimension right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExtensionDimension left, ExtensionDimension right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
